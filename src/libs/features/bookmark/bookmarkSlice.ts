import type { UsersResponse } from '@/types/type'
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { User } from 'firebase/auth';

/**
 * Represents the properties of a user required for bookmarking.
*/
export type EmployeeThunkProp = Pick<Pick<UsersResponse, 'users'>['users'][0], 'image' | 'firstName' | 'lastName' | 'username' | 'age' | 'birthDate' | 'email' | 'address' | 'company' | 'id'>

/**
 * Represents the state structure for bookmark-related functionality.
*/
export type BookmarkState = {
  /** An array of bookmarked users. */
  bookmarked: EmployeeThunkProp[];
  /** Error message for bookmark operations. */
  error: string | null;
  /** Error message for getting bookmarks. */
  bookmarkError: string | null;
  /** Current user information. */
  user: User | null;
}

/** Initial state for the bookmark-related functionality. */
const initialState: BookmarkState = {
  bookmarked: [],
  error: null,
  bookmarkError: null,
  user: null,
}

/** Slice for managing bookmark-related state and actions. */
export const bookmarkSlice = createSlice({
  name: 'bookmark',
  initialState,
  reducers: {
    /** Action to add an employee to the bookmarked list. */
    addEmployeeToBookmarked(state, action: PayloadAction<EmployeeThunkProp>) {
      state.bookmarked.unshift(action.payload)
    },
    /** Action to remove a user from the bookmarked list. */
    removeEmployeeFromBookmarked(state, action: PayloadAction<number>) {
      state.bookmarked = state.bookmarked.filter((employee) => employee.id !== action.payload)
    },
    /** Action to handle failure while adding a bookmark. */
    addBookmarkFail(state, action: PayloadAction<string>) {
      state.error = action.payload;
    },
    /** Action to handle error while fetching bookmarks. */
    getBookmarkError(state, action: PayloadAction<string>) {
      state.bookmarkError = action.payload;
    },
    /** Action to set current user. */
    setUser(state, action) {
      state.user = action.payload;
    },
    /** Action to update bookmarks. */
    updateBookmarks(state, action: PayloadAction<EmployeeThunkProp[]>) {
      state.bookmarked = action.payload;
    },
  }
})

/** Exporting actions generated by the bookmark slice. */
export const { 
  addBookmarkFail,
  addEmployeeToBookmarked,
  getBookmarkError,
  removeEmployeeFromBookmarked,
  setUser,
  updateBookmarks
} = bookmarkSlice.actions

/** Exporting the reducer function generated by the bookmark slice. */
export default bookmarkSlice.reducer
